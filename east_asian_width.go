package eastasianwidth

import "unicode"

// EastAsian is the flag for ambiguous character.
// If this flag is `true`, ambiguous characters are treated as full width.
// Elsewise, ambiguous characters are treated as half width.
// Default value is `true`.
var EastAsian = false

var _EastAsianAmbiguous = &unicode.RangeTable{
	R16: []unicode.Range16{
		{0x00A1, 0x00A1, 1},
		{0x00A4, 0x00A4, 1},
		{0x00A7, 0x00A8, 1},
		{0x00AA, 0x00AA, 1},
		{0x00AD, 0x00AE, 1},
		{0x00B0, 0x00B4, 1},
		{0x00B6, 0x00BA, 1},
		{0x00BC, 0x00BF, 1},
		{0x00C6, 0x00C6, 1},
		{0x00D0, 0x00D0, 1},
		{0x00D7, 0x00D8, 1},
		{0x00DE, 0x00E1, 1},
		{0x00E6, 0x00E6, 1},
		{0x00E8, 0x00EA, 1},
		{0x00EC, 0x00ED, 1},
		{0x00F0, 0x00F0, 1},
		{0x00F2, 0x00F3, 1},
		{0x00F7, 0x00FA, 1},
		{0x00FC, 0x00FC, 1},
		{0x00FE, 0x00FE, 1},
		{0x0101, 0x0101, 1},
		{0x0111, 0x0111, 1},
		{0x0113, 0x0113, 1},
		{0x011B, 0x011B, 1},
		{0x0126, 0x0127, 1},
		{0x012B, 0x012B, 1},
		{0x0131, 0x0133, 1},
		{0x0138, 0x0138, 1},
		{0x013F, 0x0142, 1},
		{0x0144, 0x0144, 1},
		{0x0148, 0x014B, 1},
		{0x014D, 0x014D, 1},
		{0x0152, 0x0153, 1},
		{0x0166, 0x0167, 1},
		{0x016B, 0x016B, 1},
		{0x01CE, 0x01CE, 1},
		{0x01D0, 0x01D0, 1},
		{0x01D2, 0x01D2, 1},
		{0x01D4, 0x01D4, 1},
		{0x01D6, 0x01D6, 1},
		{0x01D8, 0x01D8, 1},
		{0x01DA, 0x01DA, 1},
		{0x01DC, 0x01DC, 1},
		{0x0251, 0x0251, 1},
		{0x0261, 0x0261, 1},
		{0x02C4, 0x02C4, 1},
		{0x02C7, 0x02C7, 1},
		{0x02C9, 0x02CB, 1},
		{0x02CD, 0x02CD, 1},
		{0x02D0, 0x02D0, 1},
		{0x02D8, 0x02DB, 1},
		{0x02DD, 0x02DD, 1},
		{0x02DF, 0x02DF, 1},
		{0x0300, 0x036F, 1},
		{0x0391, 0x03A9, 1},
		{0x03B1, 0x03C1, 1},
		{0x03C3, 0x03C9, 1},
		{0x0401, 0x0401, 1},
		{0x0410, 0x044F, 1},
		{0x0451, 0x0451, 1},
		{0x2010, 0x2010, 1},
		{0x2013, 0x2016, 1},
		{0x2018, 0x2019, 1},
		{0x201C, 0x201D, 1},
		{0x2020, 0x2022, 1},
		{0x2024, 0x2027, 1},
		{0x2030, 0x2030, 1},
		{0x2032, 0x2033, 1},
		{0x2035, 0x2035, 1},
		{0x203B, 0x203B, 1},
		{0x203E, 0x203E, 1},
		{0x2074, 0x2074, 1},
		{0x207F, 0x207F, 1},
		{0x2081, 0x2084, 1},
		{0x20AC, 0x20AC, 1},
		{0x2103, 0x2103, 1},
		{0x2105, 0x2105, 1},
		{0x2109, 0x2109, 1},
		{0x2113, 0x2113, 1},
		{0x2116, 0x2116, 1},
		{0x2121, 0x2122, 1},
		{0x2126, 0x2126, 1},
		{0x212B, 0x212B, 1},
		{0x2153, 0x2154, 1},
		{0x215B, 0x215E, 1},
		{0x2160, 0x216B, 1},
		{0x2170, 0x2179, 1},
		{0x2190, 0x2199, 1},
		{0x21B8, 0x21B9, 1},
		{0x21D2, 0x21D2, 1},
		{0x21D4, 0x21D4, 1},
		{0x21E7, 0x21E7, 1},
		{0x2200, 0x2200, 1},
		{0x2202, 0x2203, 1},
		{0x2207, 0x2208, 1},
		{0x220B, 0x220B, 1},
		{0x220F, 0x220F, 1},
		{0x2211, 0x2211, 1},
		{0x2215, 0x2215, 1},
		{0x221A, 0x221A, 1},
		{0x221D, 0x2220, 1},
		{0x2223, 0x2223, 1},
		{0x2225, 0x2225, 1},
		{0x2227, 0x222C, 1},
		{0x222E, 0x222E, 1},
		{0x2234, 0x2237, 1},
		{0x223C, 0x223D, 1},
		{0x2248, 0x2248, 1},
		{0x224C, 0x224C, 1},
		{0x2252, 0x2252, 1},
		{0x2260, 0x2261, 1},
		{0x2264, 0x2267, 1},
		{0x226A, 0x226B, 1},
		{0x226E, 0x226F, 1},
		{0x2282, 0x2283, 1},
		{0x2286, 0x2287, 1},
		{0x2295, 0x2295, 1},
		{0x2299, 0x2299, 1},
		{0x22A5, 0x22A5, 1},
		{0x22BF, 0x22BF, 1},
		{0x2312, 0x2312, 1},
		{0x2460, 0x24E9, 1},
		{0x24EB, 0x254B, 1},
		{0x2550, 0x2573, 1},
		{0x2580, 0x258F, 1},
		{0x2592, 0x2595, 1},
		{0x25A0, 0x25A1, 1},
		{0x25A3, 0x25A9, 1},
		{0x25B2, 0x25B3, 1},
		{0x25B6, 0x25B7, 1},
		{0x25BC, 0x25BD, 1},
		{0x25C0, 0x25C1, 1},
		{0x25C6, 0x25C8, 1},
		{0x25CB, 0x25CB, 1},
		{0x25CE, 0x25D1, 1},
		{0x25E2, 0x25E5, 1},
		{0x25EF, 0x25EF, 1},
		{0x2605, 0x2606, 1},
		{0x2609, 0x2609, 1},
		{0x260E, 0x260F, 1},
		{0x2614, 0x2615, 1},
		{0x261C, 0x261C, 1},
		{0x261E, 0x261E, 1},
		{0x2640, 0x2640, 1},
		{0x2642, 0x2642, 1},
		{0x2660, 0x2661, 1},
		{0x2663, 0x2665, 1},
		{0x2667, 0x266A, 1},
		{0x266C, 0x266D, 1},
		{0x266F, 0x266F, 1},
		{0x273D, 0x273D, 1},
		{0x2776, 0x277F, 1},
		{0xE000, 0xF8FF, 1},
		{0xFE00, 0xFE0F, 1},
		{0xFFFD, 0xFFFD, 1},
	},
	R32: []unicode.Range32{
		{0xE0100, 0xE01EF, 1},
		{0xF0000, 0xFFFFD, 1},
		{0x100000, 0x10FFFD, 1},
	},
}

var _EastAsianFullwidth = &unicode.RangeTable{
	R16: []unicode.Range16{
		{0x3000, 0x3000, 1},
		{0xff01, 0xff60, 1},
		{0xffe0, 0xffe6, 1},
	},
}

var _EastAsianHalfwidth = &unicode.RangeTable{
	R16: []unicode.Range16{
		{0x20a9, 0x20a9, 1},
		{0xff61, 0xffdc, 1},
		{0xffe8, 0xffee, 1},
	},
}

var _EastAsianNarrow = &unicode.RangeTable{
	R16: []unicode.Range16{
		{0x0020, 0x007E, 1},
		{0x00A2, 0x00A3, 1},
		{0x00A5, 0x00A6, 1},
		{0x00AC, 0x00AC, 1},
		{0x00AF, 0x00AF, 1},
		{0x27E6, 0x27EB, 1},
		{0x2985, 0x2986, 1},
	},
}

var _EastAsianNeutral = &unicode.RangeTable{
	R16: []unicode.Range16{
		{0x0000, 0x001F, 1},
		{0x007F, 0x00A0, 1},
		{0x00A9, 0x00A9, 1},
		{0x00AB, 0x00AB, 1},
		{0x00B5, 0x00B5, 1},
		{0x00BB, 0x00BB, 1},
		{0x00C0, 0x00C5, 1},
		{0x00C7, 0x00CF, 1},
		{0x00D1, 0x00D6, 1},
		{0x00D9, 0x00DD, 1},
		{0x00E2, 0x00E5, 1},
		{0x00E7, 0x00E7, 1},
		{0x00EB, 0x00EB, 1},
		{0x00EE, 0x00EF, 1},
		{0x00F1, 0x00F1, 1},
		{0x00F4, 0x00F6, 1},
		{0x00FB, 0x00FB, 1},
		{0x00FD, 0x00FD, 1},
		{0x00FF, 0x0100, 1},
		{0x0102, 0x0110, 1},
		{0x0112, 0x0112, 1},
		{0x0114, 0x011A, 1},
		{0x011C, 0x0125, 1},
		{0x0128, 0x012A, 1},
		{0x012C, 0x0130, 1},
		{0x0134, 0x0137, 1},
		{0x0139, 0x013E, 1},
		{0x0143, 0x0143, 1},
		{0x0145, 0x0147, 1},
		{0x014C, 0x014C, 1},
		{0x014E, 0x0151, 1},
		{0x0154, 0x0165, 1},
		{0x0168, 0x016A, 1},
		{0x016C, 0x01CD, 1},
		{0x01CF, 0x01CF, 1},
		{0x01D1, 0x01D1, 1},
		{0x01D3, 0x01D3, 1},
		{0x01D5, 0x01D5, 1},
		{0x01D7, 0x01D7, 1},
		{0x01D9, 0x01D9, 1},
		{0x01DB, 0x01DB, 1},
		{0x01DD, 0x0250, 1},
		{0x0252, 0x0260, 1},
		{0x0262, 0x02C3, 1},
		{0x02C5, 0x02C6, 1},
		{0x02C8, 0x02C8, 1},
		{0x02CC, 0x02CC, 1},
		{0x02CE, 0x02CF, 1},
		{0x02D1, 0x02D7, 1},
		{0x02DC, 0x02DC, 1},
		{0x02DE, 0x02DE, 1},
		{0x02E0, 0x02FF, 1},
		{0x0374, 0x0390, 1},
		{0x03AA, 0x03B0, 1},
		{0x03C2, 0x03C2, 1},
		{0x03CA, 0x0400, 1},
		{0x0402, 0x040F, 1},
		{0x0450, 0x0450, 1},
		{0x0452, 0x10FC, 1},
		{0x1160, 0x200F, 1},
		{0x2011, 0x2012, 1},
		{0x2017, 0x2017, 1},
		{0x201A, 0x201B, 1},
		{0x201E, 0x201F, 1},
		{0x2023, 0x2023, 1},
		{0x2028, 0x202F, 1},
		{0x2031, 0x2031, 1},
		{0x2034, 0x2034, 1},
		{0x2036, 0x203A, 1},
		{0x203C, 0x203D, 1},
		{0x203F, 0x2071, 1},
		{0x2075, 0x207E, 1},
		{0x2080, 0x2080, 1},
		{0x2085, 0x20A8, 1},
		{0x20AA, 0x20AB, 1},
		{0x20AD, 0x2102, 1},
		{0x2104, 0x2104, 1},
		{0x2106, 0x2108, 1},
		{0x210A, 0x2112, 1},
		{0x2114, 0x2115, 1},
		{0x2117, 0x2120, 1},
		{0x2123, 0x2125, 1},
		{0x2127, 0x212A, 1},
		{0x212C, 0x214E, 1},
		{0x2155, 0x215A, 1},
		{0x215F, 0x215F, 1},
		{0x216C, 0x216F, 1},
		{0x217A, 0x2184, 1},
		{0x219A, 0x21B7, 1},
		{0x21BA, 0x21D1, 1},
		{0x21D3, 0x21D3, 1},
		{0x21D5, 0x21E6, 1},
		{0x21E8, 0x21FF, 1},
		{0x2201, 0x2201, 1},
		{0x2204, 0x2206, 1},
		{0x2209, 0x220A, 1},
		{0x220C, 0x220E, 1},
		{0x2210, 0x2210, 1},
		{0x2212, 0x2214, 1},
		{0x2216, 0x2219, 1},
		{0x221B, 0x221C, 1},
		{0x2221, 0x2222, 1},
		{0x2224, 0x2224, 1},
		{0x2226, 0x2226, 1},
		{0x222D, 0x222D, 1},
		{0x222F, 0x2233, 1},
		{0x2238, 0x223B, 1},
		{0x223E, 0x2247, 1},
		{0x2249, 0x224B, 1},
		{0x224D, 0x2251, 1},
		{0x2253, 0x225F, 1},
		{0x2262, 0x2263, 1},
		{0x2268, 0x2269, 1},
		{0x226C, 0x226D, 1},
		{0x2270, 0x2281, 1},
		{0x2284, 0x2285, 1},
		{0x2288, 0x2294, 1},
		{0x2296, 0x2298, 1},
		{0x229A, 0x22A4, 1},
		{0x22A6, 0x22BE, 1},
		{0x22C0, 0x2311, 1},
		{0x2313, 0x2328, 1},
		{0x232B, 0x244A, 1},
		{0x24EA, 0x24EA, 1},
		{0x254C, 0x254F, 1},
		{0x2574, 0x257F, 1},
		{0x2590, 0x2591, 1},
		{0x2596, 0x259F, 1},
		{0x25A2, 0x25A2, 1},
		{0x25AA, 0x25B1, 1},
		{0x25B4, 0x25B5, 1},
		{0x25B8, 0x25BB, 1},
		{0x25BE, 0x25BF, 1},
		{0x25C2, 0x25C5, 1},
		{0x25C9, 0x25CA, 1},
		{0x25CC, 0x25CD, 1},
		{0x25D2, 0x25E1, 1},
		{0x25E6, 0x25EE, 1},
		{0x25F0, 0x2604, 1},
		{0x2607, 0x2608, 1},
		{0x260A, 0x260D, 1},
		{0x2610, 0x2613, 1},
		{0x2616, 0x261B, 1},
		{0x261D, 0x261D, 1},
		{0x261F, 0x263F, 1},
		{0x2641, 0x2641, 1},
		{0x2643, 0x265F, 1},
		{0x2662, 0x2662, 1},
		{0x2666, 0x2666, 1},
		{0x266B, 0x266B, 1},
		{0x266E, 0x266E, 1},
		{0x2670, 0x273C, 1},
		{0x273E, 0x2775, 1},
		{0x2780, 0x27E5, 1},
		{0x27F0, 0x2984, 1},
		{0x2987, 0x2E1D, 1},
		{0x303F, 0x303F, 1},
		{0x4DC0, 0x4DFF, 1},
		{0xA700, 0xA877, 1},
		{0xD800, 0xDB7F, 1},
		{0xDB80, 0xDBFF, 1},
		{0xDC00, 0xDFFF, 1},
		{0xFB00, 0xFDFD, 1},
		{0xFE20, 0xFE23, 1},
		{0xFE70, 0xFEFF, 1},
		{0xFFF9, 0xFFFC, 1},
	},
	R32: []unicode.Range32{
		{0x10000, 0x1D7FF, 1},
		{0xE0001, 0xE007F, 1},
	},
}

var _EastAsianWide = &unicode.RangeTable{
	R16: []unicode.Range16{
		{0x1100, 0x115F, 1},
		{0x2329, 0x232A, 1},
		{0x2E80, 0x2FFB, 1},
		{0x3001, 0x303E, 1},
		{0x3041, 0x33FF, 1},
		{0x3400, 0x4DB5, 1},
		{0x4E00, 0x9FBB, 1},
		{0xA000, 0xA4C6, 1},
		{0xAC00, 0xD7A3, 1},
		{0xF900, 0xFAD9, 1},
		{0xFE10, 0xFE19, 1},
		{0xFE30, 0xFE6B, 1},
	},
	R32: []unicode.Range32{
		{0x20000, 0x2A6D6, 1},
		{0x2A6D7, 0x2F7FF, 1},
		{0x2F800, 0x2FA1D, 1},
		{0x2FA1E, 0x2FFFD, 1},
		{0x30000, 0x3FFFD, 1},
	},
}

// EastAsianAmbiguous is the unicode.RangeTable for East Asian ambiguous characters
var EastAsianAmbiguous = _EastAsianAmbiguous

// EastAsianFullwidth is the unicode.RangeTable for East Asian full width characters
var EastAsianFullwidth = _EastAsianFullwidth

// EastAsianHalfwidth is the unicode.RangeTable for East Asian half width characters
var EastAsianHalfwidth = _EastAsianHalfwidth

// EastAsianNarrow is the unicode.RangeTable for East Asian narrow characters
var EastAsianNarrow = _EastAsianNarrow

// EastAsianNeutral is the unicode.RangeTable for East Asian neutral characters
var EastAsianNeutral = _EastAsianNeutral

// EastAsianWide is the unicode.RangeTable for East Asian wide characters
var EastAsianWide = _EastAsianWide

// Fullwidth returns the map of unicode.RangeTable of full width East Asian characters
func Fullwidth() map[string]*unicode.RangeTable {
	rangeTable := map[string]*unicode.RangeTable{
		"EastAsianFullwidth": EastAsianFullwidth,
		"EastAsianWide":      EastAsianWide,
	}

	if EastAsian {
		rangeTable["EastAsianAmbiguous"] = EastAsianAmbiguous
	}

	return rangeTable
}

// Halfwidth returns the map of unicode.RangeTable of half width East Asian characters
func Halfwidth() map[string]*unicode.RangeTable {
	rangeTable := map[string]*unicode.RangeTable{
		"EastAsianHalfwidth": EastAsianHalfwidth,
		"EastAsianNarrow":    EastAsianNarrow,
		"EastAsianNeutral":   EastAsianNeutral,
	}

	if !EastAsian {
		rangeTable["EastAsianAmbiguous"] = EastAsianAmbiguous
	}

	return rangeTable
}

// IsFullwidth reports whether the rune is in range of full width character of East Asian.
func IsFullwidth(char rune) bool {
	for _, fullwidthRangeTable := range Fullwidth() {
		if unicode.Is(fullwidthRangeTable, char) {
			return true
		}
	}
	return false
}

// IsHalfwidth reports whether the rune is in range of half width character of East Asian.
func IsHalfwidth(char rune) bool {
	for _, halfwidthRangeTable := range Halfwidth() {
		if unicode.Is(halfwidthRangeTable, char) {
			return true
		}
	}
	return false
}
